----------------------------------------------------------------------------------------------------------------------------------------------------------------

	Um teste necessita de:
		* Um cenário, onde tudo que necessitamos é inicializado.
		* A execução da ação a ser testada.
		* A validação após a ação ser executada.
		
----------------------------------------------------------------------------------------------------------------------------------------------------------------

	Princípios de um teste unitário (FIRST):
	
		Fast - Rápido de ser criado.
		Independent - Execuções de outros testes, ou altereação de ordem de execução não devem influenciar.
		Repeatable - Mesmo sendo executado várias vezes deve entregar os valores esperados.
		Self-Verifying - Auto verificável.
		Timely - Utilizado na oportunidade correta.
		
----------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	Padrões xUnit:
	
		Test Runner - Quem executa o teste e coleta os resultados.
		Test Fixture/Context - Pré condições necessárias aos testes.
		Test Suites - Elenca os testes que devem ser executados.
		Test Result Formatter - Padroniza os resultados dos testes.
		Assertions - Verifica o comportamento ou estado do que está sendo testado. 
		
----------------------------------------------------------------------------------------------------------------------------------------------------------------

	Uma asserção recebe o valor esperado e o valor atual, nesta ordem.
	
	Um teste unitário deve executar uma única asserção.
	
	O I do FIRST também significa isolado.
	
	Desta maneira as falhas ficam muito mais rastreáveis.
	
	Quando, em um teste com mais de uma asserção, ocorre um erro em uma delas, as próximas deixam de ser verificadas(estando com ou sem erros).
	
	Porém, quando é percebido que um mesmo cenário e uma mesma ação estão se repetindo em vários testes, vale mais a pena testar com mais de uma asserção.
	
	Um exemplo disso são testes que checam atributos de um objeto após uma ação.
	
	Neste caso, há o ganho de repetir menos códigos, mas a perda de rastreabilidade.
	
	
	>>>>>>> OBS <<<<<<<:
	
	Podemos utilizar o ErrorCollector em casos de mais de uma asserção em um mesmo teste, e mesmo que ocorram erros, 
	as demais asserções realizadas com a instância de ErrorCollector serão executadas e assim a rastreabilidade se mantém.
	
	assertThat e outras parecidas recebem os argumentos na ordem inversa as asserções comuns.
	
	assertThat(<realidade>, <expectativa>);
	
----------------------------------------------------------------------------------------------------------------------------------------------------------------

	Quando um teste possuí algum método dentro dele que lança uma exceção para cima, não devemos colocá-lo em um try/catch e dar um Assert.fail(<mensagem>) no finally.
	
	Se a exceção esperada é genérica demais, devemos colocá-la em um try/catch e verificar se a mensagem da exceção é igual a mensagem que esperávamos.
	
	Caso a exceção esperada seja específica	podemos lançar a exceção novamente para cima, pois neste ambiente de teste o Junit irá gerenciar a exceção.
	Assim evitamos falsos positivos.
	
	Clicando em cima da falha ou exceção gerada em um teste, podemos debugar o mesmo.
	
	Falhas são geradas a partir de asserções que não possuem a expectativa de resultado como esperado.
	
	Exceções são erros tratados ou não.
	
	Cores:
	
		Azul - Exceção
		Vermelho - Falha
		Azul - Passou

----------------------------------------------------------------------------------------------------------------------------------------------------------------

	Sempre que for realizado um teste, realizar logo em seguida um teste com o cenário contrário é bom para verificar se realmente tudo está saindo
	como o esperado.
	
----------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	O JUnit re-inicializa todos atributos da classe a cada execução de testes, a não ser que o atributo seja estático.
	Desta maneira, temos certeza que todos testes iniciam do mesmo ponto de partida, e que as alterações nos atributos não irão se manter
	em outros testes.
	Assim, um teste não impactará nos demais.
	
----------------------------------------------------------------------------------------------------------------------------------------------------------------